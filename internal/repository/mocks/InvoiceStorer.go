// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/SamnitPatil9882/foodOrderingSystem/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// InvoiceStorer is an autogenerated mock type for the InvoiceStorer type
type InvoiceStorer struct {
	mock.Mock
}

// CreateInvoice provides a mock function with given fields: ctx, invoiceInfo
func (_m *InvoiceStorer) CreateInvoice(ctx context.Context, invoiceInfo dto.InvoiceCreation) (dto.Invoice, error) {
	ret := _m.Called(ctx, invoiceInfo)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoice")
	}

	var r0 dto.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.InvoiceCreation) (dto.Invoice, error)); ok {
		return rf(ctx, invoiceInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.InvoiceCreation) dto.Invoice); ok {
		r0 = rf(ctx, invoiceInfo)
	} else {
		r0 = ret.Get(0).(dto.Invoice)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.InvoiceCreation) error); ok {
		r1 = rf(ctx, invoiceInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceByOrderID provides a mock function with given fields: ctx, orderId, userId, role
func (_m *InvoiceStorer) GetInvoiceByOrderID(ctx context.Context, orderId int, userId int, role string) (dto.Invoice, error) {
	ret := _m.Called(ctx, orderId, userId, role)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceByOrderID")
	}

	var r0 dto.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) (dto.Invoice, error)); ok {
		return rf(ctx, orderId, userId, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) dto.Invoice); ok {
		r0 = rf(ctx, orderId, userId, role)
	} else {
		r0 = ret.Get(0).(dto.Invoice)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string) error); ok {
		r1 = rf(ctx, orderId, userId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInvoiceStorer creates a new instance of InvoiceStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvoiceStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *InvoiceStorer {
	mock := &InvoiceStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

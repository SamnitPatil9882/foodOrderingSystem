// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/SamnitPatil9882/foodOrderingSystem/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// UserStorer is an autogenerated mock type for the UserStorer type
type UserStorer struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: ctx, userId
func (_m *UserStorer) GetUser(ctx context.Context, userId int) (dto.UserResponse, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 dto.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (dto.UserResponse, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) dto.UserResponse); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(dto.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx
func (_m *UserStorer) GetUsers(ctx context.Context) ([]dto.UserResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []dto.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.UserResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.UserResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, user
func (_m *UserStorer) Login(ctx context.Context, user dto.UserLoginRequest) (dto.UserLoginResponse, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 dto.UserLoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserLoginRequest) (dto.UserLoginResponse, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserLoginRequest) dto.UserLoginResponse); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(dto.UserLoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UserLoginRequest) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signup provides a mock function with given fields: ctx, user
func (_m *UserStorer) Signup(ctx context.Context, user dto.UserSignUpRequest) (dto.UserLoginResponse, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 dto.UserLoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserSignUpRequest) (dto.UserLoginResponse, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserSignUpRequest) dto.UserLoginResponse); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(dto.UserLoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UserSignUpRequest) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, updateInfo, userID
func (_m *UserStorer) UpdateUser(ctx context.Context, updateInfo dto.UpdateUserInfo, userID int) (dto.UserResponse, error) {
	ret := _m.Called(ctx, updateInfo, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 dto.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateUserInfo, int) (dto.UserResponse, error)); ok {
		return rf(ctx, updateInfo, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateUserInfo, int) dto.UserResponse); ok {
		r0 = rf(ctx, updateInfo, userID)
	} else {
		r0 = ret.Get(0).(dto.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UpdateUserInfo, int) error); ok {
		r1 = rf(ctx, updateInfo, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserStorer creates a new instance of UserStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStorer {
	mock := &UserStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/SamnitPatil9882/foodOrderingSystem/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/SamnitPatil9882/foodOrderingSystem/internal/repository"
)

// FoodStorer is an autogenerated mock type for the FoodStorer type
type FoodStorer struct {
	mock.Mock
}

// CreateFood provides a mock function with given fields: ctx, food
func (_m *FoodStorer) CreateFood(ctx context.Context, food dto.FoodCreateRequest) (repository.Food, error) {
	ret := _m.Called(ctx, food)

	if len(ret) == 0 {
		panic("no return value specified for CreateFood")
	}

	var r0 repository.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.FoodCreateRequest) (repository.Food, error)); ok {
		return rf(ctx, food)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.FoodCreateRequest) repository.Food); ok {
		r0 = rf(ctx, food)
	} else {
		r0 = ret.Get(0).(repository.Food)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.FoodCreateRequest) error); ok {
		r1 = rf(ctx, food)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFoodByCategory provides a mock function with given fields: ctx, categoryID
func (_m *FoodStorer) GetFoodByCategory(ctx context.Context, categoryID int) ([]repository.Food, error) {
	ret := _m.Called(ctx, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for GetFoodByCategory")
	}

	var r0 []repository.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]repository.Food, error)); ok {
		return rf(ctx, categoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []repository.Food); ok {
		r0 = rf(ctx, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Food)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFoodByID provides a mock function with given fields: ctx, FoodID
func (_m *FoodStorer) GetFoodByID(ctx context.Context, FoodID int64) (repository.Food, error) {
	ret := _m.Called(ctx, FoodID)

	if len(ret) == 0 {
		panic("no return value specified for GetFoodByID")
	}

	var r0 repository.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (repository.Food, error)); ok {
		return rf(ctx, FoodID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) repository.Food); ok {
		r0 = rf(ctx, FoodID)
	} else {
		r0 = ret.Get(0).(repository.Food)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, FoodID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListOfOrder provides a mock function with given fields: ctx
func (_m *FoodStorer) GetListOfOrder(ctx context.Context) ([]repository.Food, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetListOfOrder")
	}

	var r0 []repository.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repository.Food, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repository.Food); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Food)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFood provides a mock function with given fields: ctx, food
func (_m *FoodStorer) UpdateFood(ctx context.Context, food dto.Food) (repository.Food, error) {
	ret := _m.Called(ctx, food)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFood")
	}

	var r0 repository.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Food) (repository.Food, error)); ok {
		return rf(ctx, food)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Food) repository.Food); ok {
		r0 = rf(ctx, food)
	} else {
		r0 = ret.Get(0).(repository.Food)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Food) error); ok {
		r1 = rf(ctx, food)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFoodStorer creates a new instance of FoodStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFoodStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *FoodStorer {
	mock := &FoodStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

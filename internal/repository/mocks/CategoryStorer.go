// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/SamnitPatil9882/foodOrderingSystem/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/SamnitPatil9882/foodOrderingSystem/internal/repository"
)

// CategoryStorer is an autogenerated mock type for the CategoryStorer type
type CategoryStorer struct {
	mock.Mock
}

// CreateCategory provides a mock function with given fields: ctx, category
func (_m *CategoryStorer) CreateCategory(ctx context.Context, category dto.CategoryCreateRequest) (repository.Category, error) {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 repository.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CategoryCreateRequest) (repository.Category, error)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CategoryCreateRequest) repository.Category); ok {
		r0 = rf(ctx, category)
	} else {
		r0 = ret.Get(0).(repository.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CategoryCreateRequest) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategories provides a mock function with given fields: ctx
func (_m *CategoryStorer) GetCategories(ctx context.Context) ([]repository.Category, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCategories")
	}

	var r0 []repository.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repository.Category, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repository.Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategory provides a mock function with given fields: ctx, categoryID
func (_m *CategoryStorer) GetCategory(ctx context.Context, categoryID int64) (repository.Category, error) {
	ret := _m.Called(ctx, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for GetCategory")
	}

	var r0 repository.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (repository.Category, error)); ok {
		return rf(ctx, categoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) repository.Category); ok {
		r0 = rf(ctx, categoryID)
	} else {
		r0 = ret.Get(0).(repository.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategory provides a mock function with given fields: ctx, category
func (_m *CategoryStorer) UpdateCategory(ctx context.Context, category dto.Category) (dto.Category, error) {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 dto.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Category) (dto.Category, error)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Category) dto.Category); ok {
		r0 = rf(ctx, category)
	} else {
		r0 = ret.Get(0).(dto.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Category) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCategoryStorer creates a new instance of CategoryStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryStorer {
	mock := &CategoryStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

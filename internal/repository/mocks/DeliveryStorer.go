// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/SamnitPatil9882/foodOrderingSystem/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// DeliveryStorer is an autogenerated mock type for the DeliveryStorer type
type DeliveryStorer struct {
	mock.Mock
}

// GetDeliveryList provides a mock function with given fields: ctx, userID
func (_m *DeliveryStorer) GetDeliveryList(ctx context.Context, userID int) ([]dto.Delivery, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDeliveryList")
	}

	var r0 []dto.Delivery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]dto.Delivery, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []dto.Delivery); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Delivery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeliveryInfo provides a mock function with given fields: ctx, updateInfo
func (_m *DeliveryStorer) UpdateDeliveryInfo(ctx context.Context, updateInfo dto.DeliveryUpdateRequst) error {
	ret := _m.Called(ctx, updateInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeliveryInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.DeliveryUpdateRequst) error); ok {
		r0 = rf(ctx, updateInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDeliveryStorer creates a new instance of DeliveryStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeliveryStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeliveryStorer {
	mock := &DeliveryStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

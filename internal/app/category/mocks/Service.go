// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/SamnitPatil9882/foodOrderingSystem/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateCategory provides a mock function with given fields: ctx, createCategory
func (_m *Service) CreateCategory(ctx context.Context, createCategory dto.CategoryCreateRequest) (dto.Category, error) {
	ret := _m.Called(ctx, createCategory)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 dto.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CategoryCreateRequest) (dto.Category, error)); ok {
		return rf(ctx, createCategory)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CategoryCreateRequest) dto.Category); ok {
		r0 = rf(ctx, createCategory)
	} else {
		r0 = ret.Get(0).(dto.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CategoryCreateRequest) error); ok {
		r1 = rf(ctx, createCategory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategories provides a mock function with given fields: ctx
func (_m *Service) GetCategories(ctx context.Context) ([]dto.Category, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCategories")
	}

	var r0 []dto.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.Category, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategory provides a mock function with given fields: ctx, categoryID
func (_m *Service) GetCategory(ctx context.Context, categoryID int64) (dto.Category, error) {
	ret := _m.Called(ctx, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for GetCategory")
	}

	var r0 dto.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (dto.Category, error)); ok {
		return rf(ctx, categoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) dto.Category); ok {
		r0 = rf(ctx, categoryID)
	} else {
		r0 = ret.Get(0).(dto.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategory provides a mock function with given fields: ctx, updateCategory
func (_m *Service) UpdateCategory(ctx context.Context, updateCategory dto.Category) (dto.Category, error) {
	ret := _m.Called(ctx, updateCategory)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 dto.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Category) (dto.Category, error)); ok {
		return rf(ctx, updateCategory)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Category) dto.Category); ok {
		r0 = rf(ctx, updateCategory)
	} else {
		r0 = ret.Get(0).(dto.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Category) error); ok {
		r1 = rf(ctx, updateCategory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

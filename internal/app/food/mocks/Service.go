// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/SamnitPatil9882/foodOrderingSystem/internal/pkg/dto"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateFoodItem provides a mock function with given fields: ctx, fd
func (_m *Service) CreateFoodItem(ctx context.Context, fd dto.FoodCreateRequest) (dto.Food, error) {
	ret := _m.Called(ctx, fd)

	if len(ret) == 0 {
		panic("no return value specified for CreateFoodItem")
	}

	var r0 dto.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.FoodCreateRequest) (dto.Food, error)); ok {
		return rf(ctx, fd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.FoodCreateRequest) dto.Food); ok {
		r0 = rf(ctx, fd)
	} else {
		r0 = ret.Get(0).(dto.Food)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.FoodCreateRequest) error); ok {
		r1 = rf(ctx, fd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFoodByID provides a mock function with given fields: ctx, foodID
func (_m *Service) GetFoodByID(ctx context.Context, foodID int) (dto.Food, error) {
	ret := _m.Called(ctx, foodID)

	if len(ret) == 0 {
		panic("no return value specified for GetFoodByID")
	}

	var r0 dto.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (dto.Food, error)); ok {
		return rf(ctx, foodID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) dto.Food); ok {
		r0 = rf(ctx, foodID)
	} else {
		r0 = ret.Get(0).(dto.Food)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, foodID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFoodList provides a mock function with given fields: ctx
func (_m *Service) GetFoodList(ctx context.Context) ([]dto.Food, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFoodList")
	}

	var r0 []dto.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.Food, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.Food); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Food)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFoodListByCategory provides a mock function with given fields: ctx, categoryID
func (_m *Service) GetFoodListByCategory(ctx context.Context, categoryID int) ([]dto.Food, error) {
	ret := _m.Called(ctx, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for GetFoodListByCategory")
	}

	var r0 []dto.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]dto.Food, error)); ok {
		return rf(ctx, categoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []dto.Food); ok {
		r0 = rf(ctx, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Food)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFoodItem provides a mock function with given fields: ctx, fd
func (_m *Service) UpdateFoodItem(ctx context.Context, fd dto.Food) (dto.Food, error) {
	ret := _m.Called(ctx, fd)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFoodItem")
	}

	var r0 dto.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Food) (dto.Food, error)); ok {
		return rf(ctx, fd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Food) dto.Food); ok {
		r0 = rf(ctx, fd)
	} else {
		r0 = ret.Get(0).(dto.Food)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Food) error); ok {
		r1 = rf(ctx, fd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

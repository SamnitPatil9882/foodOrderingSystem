// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/SamnitPatil9882/foodOrderingSystem/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *Service) GetUser(ctx context.Context, userID int) (dto.UserResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 dto.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (dto.UserResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) dto.UserResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(dto.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx
func (_m *Service) GetUsers(ctx context.Context) ([]dto.UserResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []dto.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.UserResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.UserResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, _a1
func (_m *Service) Login(ctx context.Context, _a1 dto.UserLoginRequest) (dto.UserLoginResponse, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 dto.UserLoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserLoginRequest) (dto.UserLoginResponse, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserLoginRequest) dto.UserLoginResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(dto.UserLoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UserLoginRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signup provides a mock function with given fields: ctx, _a1
func (_m *Service) Signup(ctx context.Context, _a1 dto.UserSignUpRequest) (dto.UserLoginResponse, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 dto.UserLoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserSignUpRequest) (dto.UserLoginResponse, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserSignUpRequest) dto.UserLoginResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(dto.UserLoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UserSignUpRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, updateInfo, userID
func (_m *Service) UpdateUser(ctx context.Context, updateInfo dto.UpdateUserInfo, userID int) (dto.UserResponse, error) {
	ret := _m.Called(ctx, updateInfo, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 dto.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateUserInfo, int) (dto.UserResponse, error)); ok {
		return rf(ctx, updateInfo, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateUserInfo, int) dto.UserResponse); ok {
		r0 = rf(ctx, updateInfo, userID)
	} else {
		r0 = ret.Get(0).(dto.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UpdateUserInfo, int) error); ok {
		r1 = rf(ctx, updateInfo, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
